// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#ifndef PROTOBUF_event_2eproto__INCLUDED
#define PROTOBUF_event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nebio {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_event_2eproto();
void protobuf_AssignDesc_event_2eproto();
void protobuf_ShutdownFile_event_2eproto();

class Event;
class Result;

// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebio.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string event_id = 1;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  const ::std::string& event_id() const;
  void set_event_id(const ::std::string& value);
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  ::std::string* mutable_event_id();
  ::std::string* release_event_id();
  void set_allocated_event_id(::std::string* event_id);

  // optional string event_type = 2;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // optional uint64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional string page = 4;
  void clear_page();
  static const int kPageFieldNumber = 4;
  const ::std::string& page() const;
  void set_page(const ::std::string& value);
  void set_page(const char* value);
  void set_page(const char* value, size_t size);
  ::std::string* mutable_page();
  ::std::string* release_page();
  void set_allocated_page(::std::string* page);

  // optional string referer = 5;
  void clear_referer();
  static const int kRefererFieldNumber = 5;
  const ::std::string& referer() const;
  void set_referer(const ::std::string& value);
  void set_referer(const char* value);
  void set_referer(const char* value, size_t size);
  ::std::string* mutable_referer();
  ::std::string* release_referer();
  void set_allocated_referer(::std::string* referer);

  // optional string session_id = 6;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 6;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string user_id = 7;
  void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string device_id = 8;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 8;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // optional string plat = 9;
  void clear_plat();
  static const int kPlatFieldNumber = 9;
  const ::std::string& plat() const;
  void set_plat(const ::std::string& value);
  void set_plat(const char* value);
  void set_plat(const char* value, size_t size);
  ::std::string* mutable_plat();
  ::std::string* release_plat();
  void set_allocated_plat(::std::string* plat);

  // optional string explorer = 10;
  void clear_explorer();
  static const int kExplorerFieldNumber = 10;
  const ::std::string& explorer() const;
  void set_explorer(const ::std::string& value);
  void set_explorer(const char* value);
  void set_explorer(const char* value, size_t size);
  ::std::string* mutable_explorer();
  ::std::string* release_explorer();
  void set_allocated_explorer(::std::string* explorer);

  // optional string client_ip = 11;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 11;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);

  // optional uint32 app_id = 12;
  void clear_app_id();
  static const int kAppIdFieldNumber = 12;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional string tag = 13;
  void clear_tag();
  static const int kTagFieldNumber = 13;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string tourist_id = 14;
  void clear_tourist_id();
  static const int kTouristIdFieldNumber = 14;
  const ::std::string& tourist_id() const;
  void set_tourist_id(const ::std::string& value);
  void set_tourist_id(const char* value);
  void set_tourist_id(const char* value, size_t size);
  ::std::string* mutable_tourist_id();
  ::std::string* release_tourist_id();
  void set_allocated_tourist_id(::std::string* tourist_id);

  // optional string next_page = 15;
  void clear_next_page();
  static const int kNextPageFieldNumber = 15;
  const ::std::string& next_page() const;
  void set_next_page(const ::std::string& value);
  void set_next_page(const char* value);
  void set_next_page(const char* value, size_t size);
  ::std::string* mutable_next_page();
  ::std::string* release_next_page();
  void set_allocated_next_page(::std::string* next_page);

  // optional uint32 vv = 16;
  void clear_vv();
  static const int kVvFieldNumber = 16;
  ::google::protobuf::uint32 vv() const;
  void set_vv(::google::protobuf::uint32 value);

  // optional uint32 exit_vv = 17;
  void clear_exit_vv();
  static const int kExitVvFieldNumber = 17;
  ::google::protobuf::uint32 exit_vv() const;
  void set_exit_vv(::google::protobuf::uint32 value);

  // optional uint32 bounce_vv = 18;
  void clear_bounce_vv();
  static const int kBounceVvFieldNumber = 18;
  ::google::protobuf::uint32 bounce_vv() const;
  void set_bounce_vv(::google::protobuf::uint32 value);

  // optional uint64 event_length = 19;
  void clear_event_length();
  static const int kEventLengthFieldNumber = 19;
  ::google::protobuf::uint64 event_length() const;
  void set_event_length(::google::protobuf::uint64 value);

  // optional uint64 page_length = 20;
  void clear_page_length();
  static const int kPageLengthFieldNumber = 20;
  ::google::protobuf::uint64 page_length() const;
  void set_page_length(::google::protobuf::uint64 value);

  // optional uint64 session_length = 21;
  void clear_session_length();
  static const int kSessionLengthFieldNumber = 21;
  ::google::protobuf::uint64 session_length() const;
  void set_session_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:nebio.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr event_id_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::internal::ArenaStringPtr page_;
  ::google::protobuf::internal::ArenaStringPtr referer_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  ::google::protobuf::internal::ArenaStringPtr plat_;
  ::google::protobuf::internal::ArenaStringPtr explorer_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr tourist_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 vv_;
  ::google::protobuf::internal::ArenaStringPtr next_page_;
  ::google::protobuf::uint32 exit_vv_;
  ::google::protobuf::uint32 bounce_vv_;
  ::google::protobuf::uint64 event_length_;
  ::google::protobuf::uint64 page_length_;
  ::google::protobuf::uint64 session_length_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebio.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  inline Result* New() const { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional string date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // optional string tag = 4;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string key1 = 5;
  void clear_key1();
  static const int kKey1FieldNumber = 5;
  const ::std::string& key1() const;
  void set_key1(const ::std::string& value);
  void set_key1(const char* value);
  void set_key1(const char* value, size_t size);
  ::std::string* mutable_key1();
  ::std::string* release_key1();
  void set_allocated_key1(::std::string* key1);

  // optional string key2 = 6;
  void clear_key2();
  static const int kKey2FieldNumber = 6;
  const ::std::string& key2() const;
  void set_key2(const ::std::string& value);
  void set_key2(const char* value);
  void set_key2(const char* value, size_t size);
  ::std::string* mutable_key2();
  ::std::string* release_key2();
  void set_allocated_key2(::std::string* key2);

  // optional string key3 = 7;
  void clear_key3();
  static const int kKey3FieldNumber = 7;
  const ::std::string& key3() const;
  void set_key3(const ::std::string& value);
  void set_key3(const char* value);
  void set_key3(const char* value, size_t size);
  ::std::string* mutable_key3();
  ::std::string* release_key3();
  void set_allocated_key3(::std::string* key3);

  // optional string key4 = 8;
  void clear_key4();
  static const int kKey4FieldNumber = 8;
  const ::std::string& key4() const;
  void set_key4(const ::std::string& value);
  void set_key4(const char* value);
  void set_key4(const char* value, size_t size);
  ::std::string* mutable_key4();
  ::std::string* release_key4();
  void set_allocated_key4(::std::string* key4);

  // optional uint32 key5 = 9;
  void clear_key5();
  static const int kKey5FieldNumber = 9;
  ::google::protobuf::uint32 key5() const;
  void set_key5(::google::protobuf::uint32 value);

  // optional uint32 key6 = 10;
  void clear_key6();
  static const int kKey6FieldNumber = 10;
  ::google::protobuf::uint32 key6() const;
  void set_key6(::google::protobuf::uint32 value);

  // optional uint32 pv = 11;
  void clear_pv();
  static const int kPvFieldNumber = 11;
  ::google::protobuf::uint32 pv() const;
  void set_pv(::google::protobuf::uint32 value);

  // optional uint32 uv = 12;
  void clear_uv();
  static const int kUvFieldNumber = 12;
  ::google::protobuf::uint32 uv() const;
  void set_uv(::google::protobuf::uint32 value);

  // optional uint32 vv = 13;
  void clear_vv();
  static const int kVvFieldNumber = 13;
  ::google::protobuf::uint32 vv() const;
  void set_vv(::google::protobuf::uint32 value);

  // optional uint32 iv = 14;
  void clear_iv();
  static const int kIvFieldNumber = 14;
  ::google::protobuf::uint32 iv() const;
  void set_iv(::google::protobuf::uint32 value);

  // optional uint64 length = 15;
  void clear_length();
  static const int kLengthFieldNumber = 15;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // optional uint32 exit_vv = 16;
  void clear_exit_vv();
  static const int kExitVvFieldNumber = 16;
  ::google::protobuf::uint32 exit_vv() const;
  void set_exit_vv(::google::protobuf::uint32 value);

  // optional uint32 bounce_vv = 17;
  void clear_bounce_vv();
  static const int kBounceVvFieldNumber = 17;
  ::google::protobuf::uint32 bounce_vv() const;
  void set_bounce_vv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nebio.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr key1_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 key5_;
  ::google::protobuf::internal::ArenaStringPtr key2_;
  ::google::protobuf::internal::ArenaStringPtr key3_;
  ::google::protobuf::internal::ArenaStringPtr key4_;
  ::google::protobuf::uint32 key6_;
  ::google::protobuf::uint32 pv_;
  ::google::protobuf::uint32 uv_;
  ::google::protobuf::uint32 vv_;
  ::google::protobuf::uint64 length_;
  ::google::protobuf::uint32 iv_;
  ::google::protobuf::uint32 exit_vv_;
  ::google::protobuf::uint32 bounce_vv_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional string event_id = 1;
inline void Event::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::event_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.event_id)
  return event_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_event_id(const ::std::string& value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.event_id)
}
inline void Event::set_event_id(const char* value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.event_id)
}
inline void Event::set_event_id(const char* value, size_t size) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.event_id)
}
inline ::std::string* Event::mutable_event_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.event_id)
  return event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_event_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.event_id)
  
  return event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_event_id(::std::string* event_id) {
  if (event_id != NULL) {
    
  } else {
    
  }
  event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.event_id)
}

// optional string event_type = 2;
inline void Event::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::event_type() const {
  // @@protoc_insertion_point(field_get:nebio.Event.event_type)
  return event_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.event_type)
}
inline void Event::set_event_type(const char* value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.event_type)
}
inline void Event::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.event_type)
}
inline ::std::string* Event::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_event_type() {
  // @@protoc_insertion_point(field_release:nebio.Event.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_event_type(::std::string* event_type) {
  if (event_type != NULL) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.event_type)
}

// optional uint64 time = 3;
inline void Event::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::time() const {
  // @@protoc_insertion_point(field_get:nebio.Event.time)
  return time_;
}
inline void Event::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.time)
}

// optional string page = 4;
inline void Event::clear_page() {
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::page() const {
  // @@protoc_insertion_point(field_get:nebio.Event.page)
  return page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_page(const ::std::string& value) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.page)
}
inline void Event::set_page(const char* value) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.page)
}
inline void Event::set_page(const char* value, size_t size) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.page)
}
inline ::std::string* Event::mutable_page() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.page)
  return page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_page() {
  // @@protoc_insertion_point(field_release:nebio.Event.page)
  
  return page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_page(::std::string* page) {
  if (page != NULL) {
    
  } else {
    
  }
  page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.page)
}

// optional string referer = 5;
inline void Event::clear_referer() {
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::referer() const {
  // @@protoc_insertion_point(field_get:nebio.Event.referer)
  return referer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_referer(const ::std::string& value) {
  
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.referer)
}
inline void Event::set_referer(const char* value) {
  
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.referer)
}
inline void Event::set_referer(const char* value, size_t size) {
  
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.referer)
}
inline ::std::string* Event::mutable_referer() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.referer)
  return referer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_referer() {
  // @@protoc_insertion_point(field_release:nebio.Event.referer)
  
  return referer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_referer(::std::string* referer) {
  if (referer != NULL) {
    
  } else {
    
  }
  referer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referer);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.referer)
}

// optional string session_id = 6;
inline void Event::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::session_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.session_id)
}
inline void Event::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.session_id)
}
inline void Event::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.session_id)
}
inline ::std::string* Event::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_session_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.session_id)
}

// optional string user_id = 7;
inline void Event::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::user_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.user_id)
}
inline void Event::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.user_id)
}
inline void Event::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.user_id)
}
inline ::std::string* Event::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_user_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.user_id)
}

// optional string device_id = 8;
inline void Event::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::device_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.device_id)
  return device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.device_id)
}
inline void Event::set_device_id(const char* value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.device_id)
}
inline void Event::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.device_id)
}
inline ::std::string* Event::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_device_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.device_id)
}

// optional string plat = 9;
inline void Event::clear_plat() {
  plat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::plat() const {
  // @@protoc_insertion_point(field_get:nebio.Event.plat)
  return plat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_plat(const ::std::string& value) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.plat)
}
inline void Event::set_plat(const char* value) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.plat)
}
inline void Event::set_plat(const char* value, size_t size) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.plat)
}
inline ::std::string* Event::mutable_plat() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.plat)
  return plat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_plat() {
  // @@protoc_insertion_point(field_release:nebio.Event.plat)
  
  return plat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_plat(::std::string* plat) {
  if (plat != NULL) {
    
  } else {
    
  }
  plat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plat);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.plat)
}

// optional string explorer = 10;
inline void Event::clear_explorer() {
  explorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::explorer() const {
  // @@protoc_insertion_point(field_get:nebio.Event.explorer)
  return explorer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_explorer(const ::std::string& value) {
  
  explorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.explorer)
}
inline void Event::set_explorer(const char* value) {
  
  explorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.explorer)
}
inline void Event::set_explorer(const char* value, size_t size) {
  
  explorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.explorer)
}
inline ::std::string* Event::mutable_explorer() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.explorer)
  return explorer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_explorer() {
  // @@protoc_insertion_point(field_release:nebio.Event.explorer)
  
  return explorer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_explorer(::std::string* explorer) {
  if (explorer != NULL) {
    
  } else {
    
  }
  explorer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explorer);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.explorer)
}

// optional string client_ip = 11;
inline void Event::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::client_ip() const {
  // @@protoc_insertion_point(field_get:nebio.Event.client_ip)
  return client_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_client_ip(const ::std::string& value) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.client_ip)
}
inline void Event::set_client_ip(const char* value) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.client_ip)
}
inline void Event::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.client_ip)
}
inline ::std::string* Event::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.client_ip)
  return client_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_client_ip() {
  // @@protoc_insertion_point(field_release:nebio.Event.client_ip)
  
  return client_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.client_ip)
}

// optional uint32 app_id = 12;
inline void Event::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 Event::app_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.app_id)
  return app_id_;
}
inline void Event::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.app_id)
}

// optional string tag = 13;
inline void Event::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::tag() const {
  // @@protoc_insertion_point(field_get:nebio.Event.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.tag)
}
inline void Event::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.tag)
}
inline void Event::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.tag)
}
inline ::std::string* Event::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_tag() {
  // @@protoc_insertion_point(field_release:nebio.Event.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.tag)
}

// optional string tourist_id = 14;
inline void Event::clear_tourist_id() {
  tourist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::tourist_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.tourist_id)
  return tourist_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_tourist_id(const ::std::string& value) {
  
  tourist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.tourist_id)
}
inline void Event::set_tourist_id(const char* value) {
  
  tourist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.tourist_id)
}
inline void Event::set_tourist_id(const char* value, size_t size) {
  
  tourist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.tourist_id)
}
inline ::std::string* Event::mutable_tourist_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.tourist_id)
  return tourist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_tourist_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.tourist_id)
  
  return tourist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_tourist_id(::std::string* tourist_id) {
  if (tourist_id != NULL) {
    
  } else {
    
  }
  tourist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tourist_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.tourist_id)
}

// optional string next_page = 15;
inline void Event::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::next_page() const {
  // @@protoc_insertion_point(field_get:nebio.Event.next_page)
  return next_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_next_page(const ::std::string& value) {
  
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.next_page)
}
inline void Event::set_next_page(const char* value) {
  
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.next_page)
}
inline void Event::set_next_page(const char* value, size_t size) {
  
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.next_page)
}
inline ::std::string* Event::mutable_next_page() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.next_page)
  return next_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_next_page() {
  // @@protoc_insertion_point(field_release:nebio.Event.next_page)
  
  return next_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_next_page(::std::string* next_page) {
  if (next_page != NULL) {
    
  } else {
    
  }
  next_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.next_page)
}

// optional uint32 vv = 16;
inline void Event::clear_vv() {
  vv_ = 0u;
}
inline ::google::protobuf::uint32 Event::vv() const {
  // @@protoc_insertion_point(field_get:nebio.Event.vv)
  return vv_;
}
inline void Event::set_vv(::google::protobuf::uint32 value) {
  
  vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.vv)
}

// optional uint32 exit_vv = 17;
inline void Event::clear_exit_vv() {
  exit_vv_ = 0u;
}
inline ::google::protobuf::uint32 Event::exit_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Event.exit_vv)
  return exit_vv_;
}
inline void Event::set_exit_vv(::google::protobuf::uint32 value) {
  
  exit_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.exit_vv)
}

// optional uint32 bounce_vv = 18;
inline void Event::clear_bounce_vv() {
  bounce_vv_ = 0u;
}
inline ::google::protobuf::uint32 Event::bounce_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Event.bounce_vv)
  return bounce_vv_;
}
inline void Event::set_bounce_vv(::google::protobuf::uint32 value) {
  
  bounce_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.bounce_vv)
}

// optional uint64 event_length = 19;
inline void Event::clear_event_length() {
  event_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::event_length() const {
  // @@protoc_insertion_point(field_get:nebio.Event.event_length)
  return event_length_;
}
inline void Event::set_event_length(::google::protobuf::uint64 value) {
  
  event_length_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.event_length)
}

// optional uint64 page_length = 20;
inline void Event::clear_page_length() {
  page_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::page_length() const {
  // @@protoc_insertion_point(field_get:nebio.Event.page_length)
  return page_length_;
}
inline void Event::set_page_length(::google::protobuf::uint64 value) {
  
  page_length_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.page_length)
}

// optional uint64 session_length = 21;
inline void Event::clear_session_length() {
  session_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::session_length() const {
  // @@protoc_insertion_point(field_get:nebio.Event.session_length)
  return session_length_;
}
inline void Event::set_session_length(::google::protobuf::uint64 value) {
  
  session_length_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.session_length)
}

// -------------------------------------------------------------------

// Result

// optional uint32 app_id = 1;
inline void Result::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 Result::app_id() const {
  // @@protoc_insertion_point(field_get:nebio.Result.app_id)
  return app_id_;
}
inline void Result::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.app_id)
}

// optional string date = 2;
inline void Result::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::date() const {
  // @@protoc_insertion_point(field_get:nebio.Result.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.date)
}
inline void Result::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.date)
}
inline void Result::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.date)
}
inline ::std::string* Result::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_date() {
  // @@protoc_insertion_point(field_release:nebio.Result.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.date)
}

// optional string channel = 3;
inline void Result::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::channel() const {
  // @@protoc_insertion_point(field_get:nebio.Result.channel)
  return channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.channel)
}
inline void Result::set_channel(const char* value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.channel)
}
inline void Result::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.channel)
}
inline ::std::string* Result::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_channel() {
  // @@protoc_insertion_point(field_release:nebio.Result.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.channel)
}

// optional string tag = 4;
inline void Result::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::tag() const {
  // @@protoc_insertion_point(field_get:nebio.Result.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.tag)
}
inline void Result::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.tag)
}
inline void Result::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.tag)
}
inline ::std::string* Result::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_tag() {
  // @@protoc_insertion_point(field_release:nebio.Result.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.tag)
}

// optional string key1 = 5;
inline void Result::clear_key1() {
  key1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::key1() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key1)
  return key1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_key1(const ::std::string& value) {
  
  key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key1)
}
inline void Result::set_key1(const char* value) {
  
  key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key1)
}
inline void Result::set_key1(const char* value, size_t size) {
  
  key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key1)
}
inline ::std::string* Result::mutable_key1() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key1)
  return key1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_key1() {
  // @@protoc_insertion_point(field_release:nebio.Result.key1)
  
  return key1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_key1(::std::string* key1) {
  if (key1 != NULL) {
    
  } else {
    
  }
  key1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key1);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key1)
}

// optional string key2 = 6;
inline void Result::clear_key2() {
  key2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::key2() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key2)
  return key2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_key2(const ::std::string& value) {
  
  key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key2)
}
inline void Result::set_key2(const char* value) {
  
  key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key2)
}
inline void Result::set_key2(const char* value, size_t size) {
  
  key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key2)
}
inline ::std::string* Result::mutable_key2() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key2)
  return key2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_key2() {
  // @@protoc_insertion_point(field_release:nebio.Result.key2)
  
  return key2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_key2(::std::string* key2) {
  if (key2 != NULL) {
    
  } else {
    
  }
  key2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key2);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key2)
}

// optional string key3 = 7;
inline void Result::clear_key3() {
  key3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::key3() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key3)
  return key3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_key3(const ::std::string& value) {
  
  key3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key3)
}
inline void Result::set_key3(const char* value) {
  
  key3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key3)
}
inline void Result::set_key3(const char* value, size_t size) {
  
  key3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key3)
}
inline ::std::string* Result::mutable_key3() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key3)
  return key3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_key3() {
  // @@protoc_insertion_point(field_release:nebio.Result.key3)
  
  return key3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_key3(::std::string* key3) {
  if (key3 != NULL) {
    
  } else {
    
  }
  key3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key3);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key3)
}

// optional string key4 = 8;
inline void Result::clear_key4() {
  key4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::key4() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key4)
  return key4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_key4(const ::std::string& value) {
  
  key4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key4)
}
inline void Result::set_key4(const char* value) {
  
  key4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key4)
}
inline void Result::set_key4(const char* value, size_t size) {
  
  key4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key4)
}
inline ::std::string* Result::mutable_key4() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key4)
  return key4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_key4() {
  // @@protoc_insertion_point(field_release:nebio.Result.key4)
  
  return key4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_key4(::std::string* key4) {
  if (key4 != NULL) {
    
  } else {
    
  }
  key4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key4);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key4)
}

// optional uint32 key5 = 9;
inline void Result::clear_key5() {
  key5_ = 0u;
}
inline ::google::protobuf::uint32 Result::key5() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key5)
  return key5_;
}
inline void Result::set_key5(::google::protobuf::uint32 value) {
  
  key5_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.key5)
}

// optional uint32 key6 = 10;
inline void Result::clear_key6() {
  key6_ = 0u;
}
inline ::google::protobuf::uint32 Result::key6() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key6)
  return key6_;
}
inline void Result::set_key6(::google::protobuf::uint32 value) {
  
  key6_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.key6)
}

// optional uint32 pv = 11;
inline void Result::clear_pv() {
  pv_ = 0u;
}
inline ::google::protobuf::uint32 Result::pv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.pv)
  return pv_;
}
inline void Result::set_pv(::google::protobuf::uint32 value) {
  
  pv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.pv)
}

// optional uint32 uv = 12;
inline void Result::clear_uv() {
  uv_ = 0u;
}
inline ::google::protobuf::uint32 Result::uv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.uv)
  return uv_;
}
inline void Result::set_uv(::google::protobuf::uint32 value) {
  
  uv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.uv)
}

// optional uint32 vv = 13;
inline void Result::clear_vv() {
  vv_ = 0u;
}
inline ::google::protobuf::uint32 Result::vv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.vv)
  return vv_;
}
inline void Result::set_vv(::google::protobuf::uint32 value) {
  
  vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.vv)
}

// optional uint32 iv = 14;
inline void Result::clear_iv() {
  iv_ = 0u;
}
inline ::google::protobuf::uint32 Result::iv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.iv)
  return iv_;
}
inline void Result::set_iv(::google::protobuf::uint32 value) {
  
  iv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.iv)
}

// optional uint64 length = 15;
inline void Result::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Result::length() const {
  // @@protoc_insertion_point(field_get:nebio.Result.length)
  return length_;
}
inline void Result::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.length)
}

// optional uint32 exit_vv = 16;
inline void Result::clear_exit_vv() {
  exit_vv_ = 0u;
}
inline ::google::protobuf::uint32 Result::exit_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.exit_vv)
  return exit_vv_;
}
inline void Result::set_exit_vv(::google::protobuf::uint32 value) {
  
  exit_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.exit_vv)
}

// optional uint32 bounce_vv = 17;
inline void Result::clear_bounce_vv() {
  bounce_vv_ = 0u;
}
inline ::google::protobuf::uint32 Result::bounce_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.bounce_vv)
  return bounce_vv_;
}
inline void Result::set_bounce_vv(::google::protobuf::uint32 value) {
  
  bounce_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.bounce_vv)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nebio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_event_2eproto__INCLUDED
