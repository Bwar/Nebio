// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nebio {

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_E_EVENT_OPERATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, referer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, plat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, explorer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, tourist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, next_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, vv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, exit_vv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, bounce_vv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, user_type_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
  Event_E_EVENT_OPERATE_descriptor_ = Event_descriptor_->enum_type(0);
  Result_descriptor_ = file->message_type(1);
  static const int Result_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, pv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, uv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, vv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, exit_vv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, bounce_vv_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_event_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\022\005nebio\"\277\003\n\005Event\022\020\n\010event_"
    "id\030\001 \001(\t\022\022\n\nevent_type\030\002 \001(\t\022\014\n\004time\030\003 \001"
    "(\004\022\014\n\004page\030\004 \001(\t\022\017\n\007referer\030\005 \001(\t\022\022\n\nses"
    "sion_id\030\006 \001(\t\022\017\n\007user_id\030\007 \001(\t\022\021\n\tdevice"
    "_id\030\010 \001(\t\022\014\n\004plat\030\t \001(\t\022\020\n\010explorer\030\n \001("
    "\t\022\021\n\tclient_ip\030\013 \001(\t\022\016\n\006app_id\030\014 \001(\r\0220\n\n"
    "event_oper\030\r \001(\0162\034.nebio.Event.E_EVENT_O"
    "PERATE\022\013\n\003tag\030\016 \001(\t\022\022\n\ntourist_id\030\017 \001(\t\022"
    "\021\n\tnext_page\030\020 \001(\t\022\n\n\002vv\030\021 \001(\r\022\017\n\007exit_v"
    "v\030\022 \001(\r\022\021\n\tbounce_vv\030\023 \001(\r\022\016\n\006length\030\024 \001"
    "(\004\022\021\n\tuser_type\030\025 \001(\005\"/\n\017E_EVENT_OPERATE"
    "\022\r\n\tEVENT_ADD\020\000\022\r\n\tEVENT_DEL\020\001\"\374\001\n\006Resul"
    "t\022\016\n\006app_id\030\001 \001(\r\022\014\n\004date\030\002 \001(\t\022\017\n\007chann"
    "el\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\022\014\n\004key1\030\005 \001(\t\022\014\n\004k"
    "ey2\030\006 \001(\t\022\014\n\004key3\030\007 \001(\t\022\014\n\004key4\030\010 \001(\t\022\014\n"
    "\004key5\030\t \001(\r\022\014\n\004key6\030\n \001(\r\022\n\n\002pv\030\013 \001(\r\022\n\n"
    "\002uv\030\014 \001(\r\022\n\n\002vv\030\r \001(\r\022\n\n\002iv\030\016 \001(\r\022\016\n\006len"
    "gth\030\017 \001(\004\022\017\n\007exit_vv\030\020 \001(\r\022\021\n\tbounce_vv\030"
    "\021 \001(\rb\006proto3", 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Result::default_instance_ = new Result();
  Event::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_E_EVENT_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_E_EVENT_OPERATE_descriptor_;
}
bool Event_E_EVENT_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_E_EVENT_OPERATE Event::EVENT_ADD;
const Event_E_EVENT_OPERATE Event::EVENT_DEL;
const Event_E_EVENT_OPERATE Event::E_EVENT_OPERATE_MIN;
const Event_E_EVENT_OPERATE Event::E_EVENT_OPERATE_MAX;
const int Event::E_EVENT_OPERATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kEventIdFieldNumber;
const int Event::kEventTypeFieldNumber;
const int Event::kTimeFieldNumber;
const int Event::kPageFieldNumber;
const int Event::kRefererFieldNumber;
const int Event::kSessionIdFieldNumber;
const int Event::kUserIdFieldNumber;
const int Event::kDeviceIdFieldNumber;
const int Event::kPlatFieldNumber;
const int Event::kExplorerFieldNumber;
const int Event::kClientIpFieldNumber;
const int Event::kAppIdFieldNumber;
const int Event::kEventOperFieldNumber;
const int Event::kTagFieldNumber;
const int Event::kTouristIdFieldNumber;
const int Event::kNextPageFieldNumber;
const int Event::kVvFieldNumber;
const int Event::kExitVvFieldNumber;
const int Event::kBounceVvFieldNumber;
const int Event::kLengthFieldNumber;
const int Event::kUserTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebio.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nebio.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  event_oper_ = 0;
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tourist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vv_ = 0u;
  exit_vv_ = 0u;
  bounce_vv_ = 0u;
  length_ = GOOGLE_ULONGLONG(0);
  user_type_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:nebio.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explorer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tourist_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:nebio.Event)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Event, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Event*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(app_id_, event_oper_);
  plat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tourist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(vv_, user_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebio.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_id().data(), this->event_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.event_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_type;
        break;
      }

      // optional string event_type = 2;
      case 2: {
        if (tag == 18) {
         parse_event_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_type().data(), this->event_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.event_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_page;
        break;
      }

      // optional string page = 4;
      case 4: {
        if (tag == 34) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.page"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_referer;
        break;
      }

      // optional string referer = 5;
      case 5: {
        if (tag == 42) {
         parse_referer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referer().data(), this->referer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.referer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_session_id;
        break;
      }

      // optional string session_id = 6;
      case 6: {
        if (tag == 50) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_id;
        break;
      }

      // optional string user_id = 7;
      case 7: {
        if (tag == 58) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_device_id;
        break;
      }

      // optional string device_id = 8;
      case 8: {
        if (tag == 66) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.device_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_plat;
        break;
      }

      // optional string plat = 9;
      case 9: {
        if (tag == 74) {
         parse_plat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plat().data(), this->plat().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.plat"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_explorer;
        break;
      }

      // optional string explorer = 10;
      case 10: {
        if (tag == 82) {
         parse_explorer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explorer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explorer().data(), this->explorer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.explorer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 11;
      case 11: {
        if (tag == 90) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.client_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 12;
      case 12: {
        if (tag == 96) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_event_oper;
        break;
      }

      // optional .nebio.Event.E_EVENT_OPERATE event_oper = 13;
      case 13: {
        if (tag == 104) {
         parse_event_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_oper(static_cast< ::nebio::Event_E_EVENT_OPERATE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_tag;
        break;
      }

      // optional string tag = 14;
      case 14: {
        if (tag == 114) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_tourist_id;
        break;
      }

      // optional string tourist_id = 15;
      case 15: {
        if (tag == 122) {
         parse_tourist_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tourist_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tourist_id().data(), this->tourist_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.tourist_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_next_page;
        break;
      }

      // optional string next_page = 16;
      case 16: {
        if (tag == 130) {
         parse_next_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page().data(), this->next_page().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Event.next_page"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_vv;
        break;
      }

      // optional uint32 vv = 17;
      case 17: {
        if (tag == 136) {
         parse_vv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_exit_vv;
        break;
      }

      // optional uint32 exit_vv = 18;
      case 18: {
        if (tag == 144) {
         parse_exit_vv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exit_vv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_bounce_vv;
        break;
      }

      // optional uint32 bounce_vv = 19;
      case 19: {
        if (tag == 152) {
         parse_bounce_vv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounce_vv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_length;
        break;
      }

      // optional uint64 length = 20;
      case 20: {
        if (tag == 160) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_user_type;
        break;
      }

      // optional int32 user_type = 21;
      case 21: {
        if (tag == 168) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebio.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebio.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebio.Event)
  // optional string event_id = 1;
  if (this->event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_id().data(), this->event_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_id(), output);
  }

  // optional string event_type = 2;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), this->event_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.event_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_type(), output);
  }

  // optional uint64 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional string page = 4;
  if (this->page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page(), output);
  }

  // optional string referer = 5;
  if (this->referer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referer().data(), this->referer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->referer(), output);
  }

  // optional string session_id = 6;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->session_id(), output);
  }

  // optional string user_id = 7;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_id(), output);
  }

  // optional string device_id = 8;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_id(), output);
  }

  // optional string plat = 9;
  if (this->plat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plat().data(), this->plat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.plat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->plat(), output);
  }

  // optional string explorer = 10;
  if (this->explorer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explorer().data(), this->explorer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.explorer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->explorer(), output);
  }

  // optional string client_ip = 11;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->client_ip(), output);
  }

  // optional uint32 app_id = 12;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->app_id(), output);
  }

  // optional .nebio.Event.E_EVENT_OPERATE event_oper = 13;
  if (this->event_oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->event_oper(), output);
  }

  // optional string tag = 14;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tag(), output);
  }

  // optional string tourist_id = 15;
  if (this->tourist_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tourist_id().data(), this->tourist_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.tourist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tourist_id(), output);
  }

  // optional string next_page = 16;
  if (this->next_page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page().data(), this->next_page().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.next_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->next_page(), output);
  }

  // optional uint32 vv = 17;
  if (this->vv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->vv(), output);
  }

  // optional uint32 exit_vv = 18;
  if (this->exit_vv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->exit_vv(), output);
  }

  // optional uint32 bounce_vv = 19;
  if (this->bounce_vv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->bounce_vv(), output);
  }

  // optional uint64 length = 20;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->length(), output);
  }

  // optional int32 user_type = 21;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->user_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:nebio.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebio.Event)
  // optional string event_id = 1;
  if (this->event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_id().data(), this->event_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_id(), target);
  }

  // optional string event_type = 2;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), this->event_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.event_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_type(), target);
  }

  // optional uint64 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional string page = 4;
  if (this->page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page(), target);
  }

  // optional string referer = 5;
  if (this->referer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referer().data(), this->referer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->referer(), target);
  }

  // optional string session_id = 6;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->session_id(), target);
  }

  // optional string user_id = 7;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user_id(), target);
  }

  // optional string device_id = 8;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_id(), target);
  }

  // optional string plat = 9;
  if (this->plat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plat().data(), this->plat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.plat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->plat(), target);
  }

  // optional string explorer = 10;
  if (this->explorer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explorer().data(), this->explorer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.explorer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->explorer(), target);
  }

  // optional string client_ip = 11;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->client_ip(), target);
  }

  // optional uint32 app_id = 12;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->app_id(), target);
  }

  // optional .nebio.Event.E_EVENT_OPERATE event_oper = 13;
  if (this->event_oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->event_oper(), target);
  }

  // optional string tag = 14;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tag(), target);
  }

  // optional string tourist_id = 15;
  if (this->tourist_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tourist_id().data(), this->tourist_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.tourist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tourist_id(), target);
  }

  // optional string next_page = 16;
  if (this->next_page().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page().data(), this->next_page().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Event.next_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->next_page(), target);
  }

  // optional uint32 vv = 17;
  if (this->vv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->vv(), target);
  }

  // optional uint32 exit_vv = 18;
  if (this->exit_vv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->exit_vv(), target);
  }

  // optional uint32 bounce_vv = 19;
  if (this->bounce_vv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->bounce_vv(), target);
  }

  // optional uint64 length = 20;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->length(), target);
  }

  // optional int32 user_type = 21;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->user_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nebio.Event)
  return target;
}

int Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nebio.Event)
  int total_size = 0;

  // optional string event_id = 1;
  if (this->event_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_id());
  }

  // optional string event_type = 2;
  if (this->event_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_type());
  }

  // optional uint64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // optional string page = 4;
  if (this->page().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page());
  }

  // optional string referer = 5;
  if (this->referer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referer());
  }

  // optional string session_id = 6;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional string user_id = 7;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string device_id = 8;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_id());
  }

  // optional string plat = 9;
  if (this->plat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plat());
  }

  // optional string explorer = 10;
  if (this->explorer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explorer());
  }

  // optional string client_ip = 11;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // optional uint32 app_id = 12;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // optional .nebio.Event.E_EVENT_OPERATE event_oper = 13;
  if (this->event_oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_oper());
  }

  // optional string tag = 14;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // optional string tourist_id = 15;
  if (this->tourist_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tourist_id());
  }

  // optional string next_page = 16;
  if (this->next_page().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page());
  }

  // optional uint32 vv = 17;
  if (this->vv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vv());
  }

  // optional uint32 exit_vv = 18;
  if (this->exit_vv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exit_vv());
  }

  // optional uint32 bounce_vv = 19;
  if (this->bounce_vv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bounce_vv());
  }

  // optional uint64 length = 20;
  if (this->length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->length());
  }

  // optional int32 user_type = 21;
  if (this->user_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebio.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebio.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebio.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebio.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.event_id().size() > 0) {

    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  if (from.event_type().size() > 0) {

    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.page().size() > 0) {

    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  if (from.referer().size() > 0) {

    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.plat().size() > 0) {

    plat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plat_);
  }
  if (from.explorer().size() > 0) {

    explorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explorer_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.event_oper() != 0) {
    set_event_oper(from.event_oper());
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.tourist_id().size() > 0) {

    tourist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tourist_id_);
  }
  if (from.next_page().size() > 0) {

    next_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_);
  }
  if (from.vv() != 0) {
    set_vv(from.vv());
  }
  if (from.exit_vv() != 0) {
    set_exit_vv(from.exit_vv());
  }
  if (from.bounce_vv() != 0) {
    set_bounce_vv(from.bounce_vv());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebio.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebio.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  event_id_.Swap(&other->event_id_);
  event_type_.Swap(&other->event_type_);
  std::swap(time_, other->time_);
  page_.Swap(&other->page_);
  referer_.Swap(&other->referer_);
  session_id_.Swap(&other->session_id_);
  user_id_.Swap(&other->user_id_);
  device_id_.Swap(&other->device_id_);
  plat_.Swap(&other->plat_);
  explorer_.Swap(&other->explorer_);
  client_ip_.Swap(&other->client_ip_);
  std::swap(app_id_, other->app_id_);
  std::swap(event_oper_, other->event_oper_);
  tag_.Swap(&other->tag_);
  tourist_id_.Swap(&other->tourist_id_);
  next_page_.Swap(&other->next_page_);
  std::swap(vv_, other->vv_);
  std::swap(exit_vv_, other->exit_vv_);
  std::swap(bounce_vv_, other->bounce_vv_);
  std::swap(length_, other->length_);
  std::swap(user_type_, other->user_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional string event_id = 1;
void Event::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::event_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.event_id)
  return event_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_event_id(const ::std::string& value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.event_id)
}
 void Event::set_event_id(const char* value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.event_id)
}
 void Event::set_event_id(const char* value, size_t size) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.event_id)
}
 ::std::string* Event::mutable_event_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.event_id)
  return event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_event_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.event_id)
  
  return event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_event_id(::std::string* event_id) {
  if (event_id != NULL) {
    
  } else {
    
  }
  event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.event_id)
}

// optional string event_type = 2;
void Event::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::event_type() const {
  // @@protoc_insertion_point(field_get:nebio.Event.event_type)
  return event_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.event_type)
}
 void Event::set_event_type(const char* value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.event_type)
}
 void Event::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.event_type)
}
 ::std::string* Event::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_event_type() {
  // @@protoc_insertion_point(field_release:nebio.Event.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_event_type(::std::string* event_type) {
  if (event_type != NULL) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.event_type)
}

// optional uint64 time = 3;
void Event::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Event::time() const {
  // @@protoc_insertion_point(field_get:nebio.Event.time)
  return time_;
}
 void Event::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.time)
}

// optional string page = 4;
void Event::clear_page() {
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::page() const {
  // @@protoc_insertion_point(field_get:nebio.Event.page)
  return page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_page(const ::std::string& value) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.page)
}
 void Event::set_page(const char* value) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.page)
}
 void Event::set_page(const char* value, size_t size) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.page)
}
 ::std::string* Event::mutable_page() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.page)
  return page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_page() {
  // @@protoc_insertion_point(field_release:nebio.Event.page)
  
  return page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_page(::std::string* page) {
  if (page != NULL) {
    
  } else {
    
  }
  page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.page)
}

// optional string referer = 5;
void Event::clear_referer() {
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::referer() const {
  // @@protoc_insertion_point(field_get:nebio.Event.referer)
  return referer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_referer(const ::std::string& value) {
  
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.referer)
}
 void Event::set_referer(const char* value) {
  
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.referer)
}
 void Event::set_referer(const char* value, size_t size) {
  
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.referer)
}
 ::std::string* Event::mutable_referer() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.referer)
  return referer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_referer() {
  // @@protoc_insertion_point(field_release:nebio.Event.referer)
  
  return referer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_referer(::std::string* referer) {
  if (referer != NULL) {
    
  } else {
    
  }
  referer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referer);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.referer)
}

// optional string session_id = 6;
void Event::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::session_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.session_id)
}
 void Event::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.session_id)
}
 void Event::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.session_id)
}
 ::std::string* Event::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_session_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.session_id)
}

// optional string user_id = 7;
void Event::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::user_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.user_id)
}
 void Event::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.user_id)
}
 void Event::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.user_id)
}
 ::std::string* Event::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_user_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.user_id)
}

// optional string device_id = 8;
void Event::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::device_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.device_id)
  return device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.device_id)
}
 void Event::set_device_id(const char* value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.device_id)
}
 void Event::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.device_id)
}
 ::std::string* Event::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_device_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.device_id)
}

// optional string plat = 9;
void Event::clear_plat() {
  plat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::plat() const {
  // @@protoc_insertion_point(field_get:nebio.Event.plat)
  return plat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_plat(const ::std::string& value) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.plat)
}
 void Event::set_plat(const char* value) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.plat)
}
 void Event::set_plat(const char* value, size_t size) {
  
  plat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.plat)
}
 ::std::string* Event::mutable_plat() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.plat)
  return plat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_plat() {
  // @@protoc_insertion_point(field_release:nebio.Event.plat)
  
  return plat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_plat(::std::string* plat) {
  if (plat != NULL) {
    
  } else {
    
  }
  plat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plat);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.plat)
}

// optional string explorer = 10;
void Event::clear_explorer() {
  explorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::explorer() const {
  // @@protoc_insertion_point(field_get:nebio.Event.explorer)
  return explorer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_explorer(const ::std::string& value) {
  
  explorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.explorer)
}
 void Event::set_explorer(const char* value) {
  
  explorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.explorer)
}
 void Event::set_explorer(const char* value, size_t size) {
  
  explorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.explorer)
}
 ::std::string* Event::mutable_explorer() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.explorer)
  return explorer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_explorer() {
  // @@protoc_insertion_point(field_release:nebio.Event.explorer)
  
  return explorer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_explorer(::std::string* explorer) {
  if (explorer != NULL) {
    
  } else {
    
  }
  explorer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explorer);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.explorer)
}

// optional string client_ip = 11;
void Event::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::client_ip() const {
  // @@protoc_insertion_point(field_get:nebio.Event.client_ip)
  return client_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_client_ip(const ::std::string& value) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.client_ip)
}
 void Event::set_client_ip(const char* value) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.client_ip)
}
 void Event::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.client_ip)
}
 ::std::string* Event::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.client_ip)
  return client_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_client_ip() {
  // @@protoc_insertion_point(field_release:nebio.Event.client_ip)
  
  return client_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.client_ip)
}

// optional uint32 app_id = 12;
void Event::clear_app_id() {
  app_id_ = 0u;
}
 ::google::protobuf::uint32 Event::app_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.app_id)
  return app_id_;
}
 void Event::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.app_id)
}

// optional .nebio.Event.E_EVENT_OPERATE event_oper = 13;
void Event::clear_event_oper() {
  event_oper_ = 0;
}
 ::nebio::Event_E_EVENT_OPERATE Event::event_oper() const {
  // @@protoc_insertion_point(field_get:nebio.Event.event_oper)
  return static_cast< ::nebio::Event_E_EVENT_OPERATE >(event_oper_);
}
 void Event::set_event_oper(::nebio::Event_E_EVENT_OPERATE value) {
  
  event_oper_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.event_oper)
}

// optional string tag = 14;
void Event::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::tag() const {
  // @@protoc_insertion_point(field_get:nebio.Event.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.tag)
}
 void Event::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.tag)
}
 void Event::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.tag)
}
 ::std::string* Event::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_tag() {
  // @@protoc_insertion_point(field_release:nebio.Event.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.tag)
}

// optional string tourist_id = 15;
void Event::clear_tourist_id() {
  tourist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::tourist_id() const {
  // @@protoc_insertion_point(field_get:nebio.Event.tourist_id)
  return tourist_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_tourist_id(const ::std::string& value) {
  
  tourist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.tourist_id)
}
 void Event::set_tourist_id(const char* value) {
  
  tourist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.tourist_id)
}
 void Event::set_tourist_id(const char* value, size_t size) {
  
  tourist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.tourist_id)
}
 ::std::string* Event::mutable_tourist_id() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.tourist_id)
  return tourist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_tourist_id() {
  // @@protoc_insertion_point(field_release:nebio.Event.tourist_id)
  
  return tourist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_tourist_id(::std::string* tourist_id) {
  if (tourist_id != NULL) {
    
  } else {
    
  }
  tourist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tourist_id);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.tourist_id)
}

// optional string next_page = 16;
void Event::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::next_page() const {
  // @@protoc_insertion_point(field_get:nebio.Event.next_page)
  return next_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_next_page(const ::std::string& value) {
  
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Event.next_page)
}
 void Event::set_next_page(const char* value) {
  
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Event.next_page)
}
 void Event::set_next_page(const char* value, size_t size) {
  
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Event.next_page)
}
 ::std::string* Event::mutable_next_page() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Event.next_page)
  return next_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_next_page() {
  // @@protoc_insertion_point(field_release:nebio.Event.next_page)
  
  return next_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_next_page(::std::string* next_page) {
  if (next_page != NULL) {
    
  } else {
    
  }
  next_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:nebio.Event.next_page)
}

// optional uint32 vv = 17;
void Event::clear_vv() {
  vv_ = 0u;
}
 ::google::protobuf::uint32 Event::vv() const {
  // @@protoc_insertion_point(field_get:nebio.Event.vv)
  return vv_;
}
 void Event::set_vv(::google::protobuf::uint32 value) {
  
  vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.vv)
}

// optional uint32 exit_vv = 18;
void Event::clear_exit_vv() {
  exit_vv_ = 0u;
}
 ::google::protobuf::uint32 Event::exit_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Event.exit_vv)
  return exit_vv_;
}
 void Event::set_exit_vv(::google::protobuf::uint32 value) {
  
  exit_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.exit_vv)
}

// optional uint32 bounce_vv = 19;
void Event::clear_bounce_vv() {
  bounce_vv_ = 0u;
}
 ::google::protobuf::uint32 Event::bounce_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Event.bounce_vv)
  return bounce_vv_;
}
 void Event::set_bounce_vv(::google::protobuf::uint32 value) {
  
  bounce_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.bounce_vv)
}

// optional uint64 length = 20;
void Event::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Event::length() const {
  // @@protoc_insertion_point(field_get:nebio.Event.length)
  return length_;
}
 void Event::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.length)
}

// optional int32 user_type = 21;
void Event::clear_user_type() {
  user_type_ = 0;
}
 ::google::protobuf::int32 Event::user_type() const {
  // @@protoc_insertion_point(field_get:nebio.Event.user_type)
  return user_type_;
}
 void Event::set_user_type(::google::protobuf::int32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:nebio.Event.user_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kAppIdFieldNumber;
const int Result::kDateFieldNumber;
const int Result::kChannelFieldNumber;
const int Result::kTagFieldNumber;
const int Result::kKey1FieldNumber;
const int Result::kKey2FieldNumber;
const int Result::kKey3FieldNumber;
const int Result::kKey4FieldNumber;
const int Result::kKey5FieldNumber;
const int Result::kKey6FieldNumber;
const int Result::kPvFieldNumber;
const int Result::kUvFieldNumber;
const int Result::kVvFieldNumber;
const int Result::kIvFieldNumber;
const int Result::kLengthFieldNumber;
const int Result::kExitVvFieldNumber;
const int Result::kBounceVvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebio.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nebio.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_id_ = 0u;
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key5_ = 0u;
  key6_ = 0u;
  pv_ = 0u;
  uv_ = 0u;
  vv_ = 0u;
  iv_ = 0u;
  length_ = GOOGLE_ULONGLONG(0);
  exit_vv_ = 0u;
  bounce_vv_ = 0u;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:nebio.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:nebio.Result)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Result, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Result*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  app_id_ = 0u;
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(key6_, exit_vv_);
  key5_ = 0u;
  bounce_vv_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebio.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.channel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tag;
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (tag == 34) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_key1;
        break;
      }

      // optional string key1 = 5;
      case 5: {
        if (tag == 42) {
         parse_key1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key1().data(), this->key1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.key1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_key2;
        break;
      }

      // optional string key2 = 6;
      case 6: {
        if (tag == 50) {
         parse_key2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key2().data(), this->key2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.key2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_key3;
        break;
      }

      // optional string key3 = 7;
      case 7: {
        if (tag == 58) {
         parse_key3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key3().data(), this->key3().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.key3"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_key4;
        break;
      }

      // optional string key4 = 8;
      case 8: {
        if (tag == 66) {
         parse_key4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key4()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key4().data(), this->key4().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebio.Result.key4"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_key5;
        break;
      }

      // optional uint32 key5 = 9;
      case 9: {
        if (tag == 72) {
         parse_key5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_key6;
        break;
      }

      // optional uint32 key6 = 10;
      case 10: {
        if (tag == 80) {
         parse_key6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pv;
        break;
      }

      // optional uint32 pv = 11;
      case 11: {
        if (tag == 88) {
         parse_pv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_uv;
        break;
      }

      // optional uint32 uv = 12;
      case 12: {
        if (tag == 96) {
         parse_uv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_vv;
        break;
      }

      // optional uint32 vv = 13;
      case 13: {
        if (tag == 104) {
         parse_vv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_iv;
        break;
      }

      // optional uint32 iv = 14;
      case 14: {
        if (tag == 112) {
         parse_iv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_length;
        break;
      }

      // optional uint64 length = 15;
      case 15: {
        if (tag == 120) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_exit_vv;
        break;
      }

      // optional uint32 exit_vv = 16;
      case 16: {
        if (tag == 128) {
         parse_exit_vv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exit_vv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_bounce_vv;
        break;
      }

      // optional uint32 bounce_vv = 17;
      case 17: {
        if (tag == 136) {
         parse_bounce_vv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounce_vv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebio.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebio.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebio.Result)
  // optional uint32 app_id = 1;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string date = 2;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional string channel = 3;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // optional string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional string key1 = 5;
  if (this->key1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key1().data(), this->key1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->key1(), output);
  }

  // optional string key2 = 6;
  if (this->key2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key2().data(), this->key2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->key2(), output);
  }

  // optional string key3 = 7;
  if (this->key3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key3().data(), this->key3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->key3(), output);
  }

  // optional string key4 = 8;
  if (this->key4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key4().data(), this->key4().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->key4(), output);
  }

  // optional uint32 key5 = 9;
  if (this->key5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->key5(), output);
  }

  // optional uint32 key6 = 10;
  if (this->key6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->key6(), output);
  }

  // optional uint32 pv = 11;
  if (this->pv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pv(), output);
  }

  // optional uint32 uv = 12;
  if (this->uv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->uv(), output);
  }

  // optional uint32 vv = 13;
  if (this->vv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vv(), output);
  }

  // optional uint32 iv = 14;
  if (this->iv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->iv(), output);
  }

  // optional uint64 length = 15;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->length(), output);
  }

  // optional uint32 exit_vv = 16;
  if (this->exit_vv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->exit_vv(), output);
  }

  // optional uint32 bounce_vv = 17;
  if (this->bounce_vv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bounce_vv(), output);
  }

  // @@protoc_insertion_point(serialize_end:nebio.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebio.Result)
  // optional uint32 app_id = 1;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string date = 2;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string channel = 3;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // optional string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional string key1 = 5;
  if (this->key1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key1().data(), this->key1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key1(), target);
  }

  // optional string key2 = 6;
  if (this->key2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key2().data(), this->key2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key2(), target);
  }

  // optional string key3 = 7;
  if (this->key3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key3().data(), this->key3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key3(), target);
  }

  // optional string key4 = 8;
  if (this->key4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key4().data(), this->key4().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebio.Result.key4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->key4(), target);
  }

  // optional uint32 key5 = 9;
  if (this->key5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->key5(), target);
  }

  // optional uint32 key6 = 10;
  if (this->key6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->key6(), target);
  }

  // optional uint32 pv = 11;
  if (this->pv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pv(), target);
  }

  // optional uint32 uv = 12;
  if (this->uv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->uv(), target);
  }

  // optional uint32 vv = 13;
  if (this->vv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vv(), target);
  }

  // optional uint32 iv = 14;
  if (this->iv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->iv(), target);
  }

  // optional uint64 length = 15;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->length(), target);
  }

  // optional uint32 exit_vv = 16;
  if (this->exit_vv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->exit_vv(), target);
  }

  // optional uint32 bounce_vv = 17;
  if (this->bounce_vv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bounce_vv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nebio.Result)
  return target;
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nebio.Result)
  int total_size = 0;

  // optional uint32 app_id = 1;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  // optional string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // optional string channel = 3;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // optional string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // optional string key1 = 5;
  if (this->key1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key1());
  }

  // optional string key2 = 6;
  if (this->key2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key2());
  }

  // optional string key3 = 7;
  if (this->key3().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key3());
  }

  // optional string key4 = 8;
  if (this->key4().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key4());
  }

  // optional uint32 key5 = 9;
  if (this->key5() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key5());
  }

  // optional uint32 key6 = 10;
  if (this->key6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key6());
  }

  // optional uint32 pv = 11;
  if (this->pv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pv());
  }

  // optional uint32 uv = 12;
  if (this->uv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uv());
  }

  // optional uint32 vv = 13;
  if (this->vv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vv());
  }

  // optional uint32 iv = 14;
  if (this->iv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iv());
  }

  // optional uint64 length = 15;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->length());
  }

  // optional uint32 exit_vv = 16;
  if (this->exit_vv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exit_vv());
  }

  // optional uint32 bounce_vv = 17;
  if (this->bounce_vv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bounce_vv());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebio.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebio.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebio.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebio.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.key1().size() > 0) {

    key1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key1_);
  }
  if (from.key2().size() > 0) {

    key2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key2_);
  }
  if (from.key3().size() > 0) {

    key3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key3_);
  }
  if (from.key4().size() > 0) {

    key4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key4_);
  }
  if (from.key5() != 0) {
    set_key5(from.key5());
  }
  if (from.key6() != 0) {
    set_key6(from.key6());
  }
  if (from.pv() != 0) {
    set_pv(from.pv());
  }
  if (from.uv() != 0) {
    set_uv(from.uv());
  }
  if (from.vv() != 0) {
    set_vv(from.vv());
  }
  if (from.iv() != 0) {
    set_iv(from.iv());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.exit_vv() != 0) {
    set_exit_vv(from.exit_vv());
  }
  if (from.bounce_vv() != 0) {
    set_bounce_vv(from.bounce_vv());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebio.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebio.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(app_id_, other->app_id_);
  date_.Swap(&other->date_);
  channel_.Swap(&other->channel_);
  tag_.Swap(&other->tag_);
  key1_.Swap(&other->key1_);
  key2_.Swap(&other->key2_);
  key3_.Swap(&other->key3_);
  key4_.Swap(&other->key4_);
  std::swap(key5_, other->key5_);
  std::swap(key6_, other->key6_);
  std::swap(pv_, other->pv_);
  std::swap(uv_, other->uv_);
  std::swap(vv_, other->vv_);
  std::swap(iv_, other->iv_);
  std::swap(length_, other->length_);
  std::swap(exit_vv_, other->exit_vv_);
  std::swap(bounce_vv_, other->bounce_vv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// optional uint32 app_id = 1;
void Result::clear_app_id() {
  app_id_ = 0u;
}
 ::google::protobuf::uint32 Result::app_id() const {
  // @@protoc_insertion_point(field_get:nebio.Result.app_id)
  return app_id_;
}
 void Result::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.app_id)
}

// optional string date = 2;
void Result::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::date() const {
  // @@protoc_insertion_point(field_get:nebio.Result.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.date)
}
 void Result::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.date)
}
 void Result::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.date)
}
 ::std::string* Result::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_date() {
  // @@protoc_insertion_point(field_release:nebio.Result.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.date)
}

// optional string channel = 3;
void Result::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::channel() const {
  // @@protoc_insertion_point(field_get:nebio.Result.channel)
  return channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.channel)
}
 void Result::set_channel(const char* value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.channel)
}
 void Result::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.channel)
}
 ::std::string* Result::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_channel() {
  // @@protoc_insertion_point(field_release:nebio.Result.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.channel)
}

// optional string tag = 4;
void Result::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::tag() const {
  // @@protoc_insertion_point(field_get:nebio.Result.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.tag)
}
 void Result::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.tag)
}
 void Result::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.tag)
}
 ::std::string* Result::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_tag() {
  // @@protoc_insertion_point(field_release:nebio.Result.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.tag)
}

// optional string key1 = 5;
void Result::clear_key1() {
  key1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::key1() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key1)
  return key1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_key1(const ::std::string& value) {
  
  key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key1)
}
 void Result::set_key1(const char* value) {
  
  key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key1)
}
 void Result::set_key1(const char* value, size_t size) {
  
  key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key1)
}
 ::std::string* Result::mutable_key1() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key1)
  return key1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_key1() {
  // @@protoc_insertion_point(field_release:nebio.Result.key1)
  
  return key1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_key1(::std::string* key1) {
  if (key1 != NULL) {
    
  } else {
    
  }
  key1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key1);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key1)
}

// optional string key2 = 6;
void Result::clear_key2() {
  key2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::key2() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key2)
  return key2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_key2(const ::std::string& value) {
  
  key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key2)
}
 void Result::set_key2(const char* value) {
  
  key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key2)
}
 void Result::set_key2(const char* value, size_t size) {
  
  key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key2)
}
 ::std::string* Result::mutable_key2() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key2)
  return key2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_key2() {
  // @@protoc_insertion_point(field_release:nebio.Result.key2)
  
  return key2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_key2(::std::string* key2) {
  if (key2 != NULL) {
    
  } else {
    
  }
  key2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key2);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key2)
}

// optional string key3 = 7;
void Result::clear_key3() {
  key3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::key3() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key3)
  return key3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_key3(const ::std::string& value) {
  
  key3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key3)
}
 void Result::set_key3(const char* value) {
  
  key3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key3)
}
 void Result::set_key3(const char* value, size_t size) {
  
  key3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key3)
}
 ::std::string* Result::mutable_key3() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key3)
  return key3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_key3() {
  // @@protoc_insertion_point(field_release:nebio.Result.key3)
  
  return key3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_key3(::std::string* key3) {
  if (key3 != NULL) {
    
  } else {
    
  }
  key3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key3);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key3)
}

// optional string key4 = 8;
void Result::clear_key4() {
  key4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::key4() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key4)
  return key4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_key4(const ::std::string& value) {
  
  key4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebio.Result.key4)
}
 void Result::set_key4(const char* value) {
  
  key4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebio.Result.key4)
}
 void Result::set_key4(const char* value, size_t size) {
  
  key4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebio.Result.key4)
}
 ::std::string* Result::mutable_key4() {
  
  // @@protoc_insertion_point(field_mutable:nebio.Result.key4)
  return key4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_key4() {
  // @@protoc_insertion_point(field_release:nebio.Result.key4)
  
  return key4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_key4(::std::string* key4) {
  if (key4 != NULL) {
    
  } else {
    
  }
  key4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key4);
  // @@protoc_insertion_point(field_set_allocated:nebio.Result.key4)
}

// optional uint32 key5 = 9;
void Result::clear_key5() {
  key5_ = 0u;
}
 ::google::protobuf::uint32 Result::key5() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key5)
  return key5_;
}
 void Result::set_key5(::google::protobuf::uint32 value) {
  
  key5_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.key5)
}

// optional uint32 key6 = 10;
void Result::clear_key6() {
  key6_ = 0u;
}
 ::google::protobuf::uint32 Result::key6() const {
  // @@protoc_insertion_point(field_get:nebio.Result.key6)
  return key6_;
}
 void Result::set_key6(::google::protobuf::uint32 value) {
  
  key6_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.key6)
}

// optional uint32 pv = 11;
void Result::clear_pv() {
  pv_ = 0u;
}
 ::google::protobuf::uint32 Result::pv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.pv)
  return pv_;
}
 void Result::set_pv(::google::protobuf::uint32 value) {
  
  pv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.pv)
}

// optional uint32 uv = 12;
void Result::clear_uv() {
  uv_ = 0u;
}
 ::google::protobuf::uint32 Result::uv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.uv)
  return uv_;
}
 void Result::set_uv(::google::protobuf::uint32 value) {
  
  uv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.uv)
}

// optional uint32 vv = 13;
void Result::clear_vv() {
  vv_ = 0u;
}
 ::google::protobuf::uint32 Result::vv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.vv)
  return vv_;
}
 void Result::set_vv(::google::protobuf::uint32 value) {
  
  vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.vv)
}

// optional uint32 iv = 14;
void Result::clear_iv() {
  iv_ = 0u;
}
 ::google::protobuf::uint32 Result::iv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.iv)
  return iv_;
}
 void Result::set_iv(::google::protobuf::uint32 value) {
  
  iv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.iv)
}

// optional uint64 length = 15;
void Result::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Result::length() const {
  // @@protoc_insertion_point(field_get:nebio.Result.length)
  return length_;
}
 void Result::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.length)
}

// optional uint32 exit_vv = 16;
void Result::clear_exit_vv() {
  exit_vv_ = 0u;
}
 ::google::protobuf::uint32 Result::exit_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.exit_vv)
  return exit_vv_;
}
 void Result::set_exit_vv(::google::protobuf::uint32 value) {
  
  exit_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.exit_vv)
}

// optional uint32 bounce_vv = 17;
void Result::clear_bounce_vv() {
  bounce_vv_ = 0u;
}
 ::google::protobuf::uint32 Result::bounce_vv() const {
  // @@protoc_insertion_point(field_get:nebio.Result.bounce_vv)
  return bounce_vv_;
}
 void Result::set_bounce_vv(::google::protobuf::uint32 value) {
  
  bounce_vv_ = value;
  // @@protoc_insertion_point(field_set:nebio.Result.bounce_vv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nebio

// @@protoc_insertion_point(global_scope)
